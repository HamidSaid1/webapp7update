
"""
Standalone Python Trading Application
Complete trading engine with GUI interface - non-web version
Exact same logic, calculations, and settings as the web version
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import asyncio
import threading
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import random
import time
import json
from dataclasses import dataclass, asdict

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

@dataclass
class TradingConfig:
    """Trading configuration matching the web version exactly"""
    
    # IBKR Connection Settings
    ibkr_host: str = "127.0.0.1"
    ibkr_port: int = 7497
    client_id: int = 1
    timeout: int = 10
    paper_trading: bool = True
    
    # Trading Parameters (exact from web version)
    default_tickers: str = "APVO"
    default_exchange: str = "SMART"
    equity_per_trade: float = 100.0
    max_open_trades: int = 2
    hard_stop_loss: float = 0.03
    
    # Technical Analysis Parameters (exact from web version)
    rsi_period: int = 3
    bb_period: int = 3
    stoch_k_period: int = 2
    stoch_d_period: int = 2
    stoch_k_min: float = 50.0
    stoch_d_min: float = 40.0
    
    # Data Collection Settings (exact from web version)
    data_points: int = 16
    chart_intervals: List[str] = None
    default_chart_interval: str = "1 min"
    analysis_interval: int = 1
    duration_str: str = "1 D"
    
    def __post_init__(self):
        if self.chart_intervals is None:
            self.chart_intervals = ["5 sec", "10 sec", "30 sec", "1 min", "3 min", "5 min", "10 min", "15 min"]

class StandaloneTradingEngine:
    """Standalone trading engine with exact same logic as web version"""

    def __init__(self, config: TradingConfig):
        self.config = config
        self.logger = logging.getLogger(__name__)

        # Trading state (exact from web version)
        self.connected = False
        self.streaming = False
        self.market_data = {}
        self.active_orders = {}
        self.trade_cooldowns = {}
        self.available_funds = 1000.0
        self.force_trade_enabled = False
        self.price_history = {}

        # User configurable parameters (exact from web version)
        self.tickers = "APVO"
        self.data_points = 16
        self.chart_interval = "1 min"
        self.analysis_interval = 1
        self.rsi_period = 3
        self.bb_period = 3
        self.stoch_k_period = 2
        self.stoch_d_period = 2
        self.stoch_k_min = 50.0
        self.stoch_d_min = 40.0
        self.duration_str = "1 D"
        self.equity_per_trade = 100.0
        self.exchange_var = "SMART"
        self.hard_stop_loss = 0.03

        # Analytics tracking (exact from web version)
        self.last_price_change = "N/A"
        self.last_rsi_change = "N/A"
        self.last_bollinger_change = "N/A"
        self.trade_history = []

    def compute_slope(self, prices):
        """Exact implementation from web version"""
        if len(prices) < 2:
            return 0.0
        x = np.arange(len(prices)).reshape(-1, 1)
        y = np.array(prices).reshape(-1, 1)
        model = LinearRegression().fit(x, y)
        return model.coef_[0][0]

    def calculate_adaptive_thresholds(self, spike_stats):
        """Exact implementation from web version"""
        if spike_stats["count"] < 3:
            return None

        return {
            "price_rate": sum(spike_stats["price_rates"]) / len(spike_stats["price_rates"]),
            "rsi_rate": sum(spike_stats["rsi_rates"]) / len(spike_stats["rsi_rates"]),
            "boll_rate": sum(spike_stats["boll_rates"]) / len(spike_stats["boll_rates"]),
            "slope": sum(spike_stats["slopes"]) / len(spike_stats["slopes"])
        }

    def compute_rsi(self, df, period=14):
        """Exact RSI implementation from web version"""
        if len(df) < period + 1:
            return pd.Series([50.0] * len(df), index=df.index)

        delta = df["close"].diff()
        gain = (delta.where(delta > 0, 0)).rolling(period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(period).mean()
        rs = gain / loss
        rsi = 100 - (100 / (1 + rs))
        return rsi.fillna(50.0)

    def compute_stochastic(self, df, k_period=14, d_period=3):
        """Exact Stochastic implementation from web version"""
        if len(df) < k_period:
            df['%K'] = pd.Series([50.0] * len(df), index=df.index)
            df['%D'] = pd.Series([50.0] * len(df), index=df.index)
            return df

        if 'high' not in df.columns:
            df['high'] = df['close']
        if 'low' not in df.columns:
            df['low'] = df['close']

        low_min = df['low'].rolling(window=k_period).min()
        high_max = df['high'].rolling(window=k_period).max()

        range_val = high_max - low_min
        range_val = range_val.replace(0, 1)

        df['%K'] = ((df['close'] - low_min) / range_val * 100).fillna(50.0)
        df['%D'] = df['%K'].rolling(window=d_period).mean().fillna(50.0)
        return df

    def compute_bollinger(self, df, period=20, num_std=2):
        """Exact Bollinger implementation from web version"""
        if len(df) < period:
            return pd.Series([50.0] * len(df), index=df.index)

        sma = df["close"].rolling(period).mean()
        std = df["close"].rolling(period).std()
        upper_band = sma + (std * num_std)
        lower_band = sma - (std * num_std)

        band_width = upper_band - lower_band
        band_width = band_width.replace(0, 1)

        bollinger_pct = ((df["close"] - lower_band) / band_width * 100).fillna(50.0)
        return bollinger_pct

    async def connect(self) -> bool:
        """Connect to IBKR TWS/Gateway API - exact same logic as web version"""
        try:
            try:
                import ib_insync
                self.ib = ib_insync.IB()

                ports_to_try = [
                    (7497, "TWS Paper Trading"),
                    (7496, "TWS Live Trading"),
                    (4001, "IB Gateway Paper Trading"),
                    (4002, "IB Gateway Live Trading")
                ]

                for port, description in ports_to_try:
                    try:
                        self.logger.info(f"Attempting connection to {description} on port {port}")

                        await self.ib.connectAsync(
                            host=self.config.ibkr_host,
                            port=port,
                            clientId=self.config.client_id,
                            timeout=5
                        )

                        if self.ib.isConnected():
                            self.connected = True
                            self.logger.info(f"✅ Connected to {description}")
                            self.ib.reqMarketDataType(4)
                            return True

                    except Exception as port_error:
                        if self.ib.isConnected():
                            self.ib.disconnect()
                        self.logger.debug(f"Port {port} failed: {port_error}")
                        continue

                raise Exception(f"Could not connect to any IBKR ports")

            except ImportError:
                self.logger.warning("ib_insync not available, running in simulation mode")
                raise Exception("ib_insync not installed")

        except Exception as e:
            self.logger.error(f"❌ TWS connection failed: {e}")
            self.connected = True
            self.logger.info("✅ Running in simulation mode")
            return True

    async def disconnect(self):
        """Disconnect from IBKR TWS API"""
        if hasattr(self, 'ib') and self.ib.isConnected():
            self.ib.disconnect()
            self.logger.info("✅ Disconnected from IBKR TWS")
        self.connected = False
        self.streaming = False

    def is_connected(self) -> bool:
        """Check if connected"""
        return self.connected

    def is_streaming(self) -> bool:
        """Check if streaming"""
        return self.streaming

    async def start_market_data(self):
        """Start market data streaming - exact same logic as web version"""
        try:
            self.logger.info("Starting market data streaming")

            tickers = [ticker.strip() for ticker in self.tickers.split(',')]
            self.logger.info(f"Setting up streaming for {len(tickers)} tickers: {tickers}")

            has_real_connection = (hasattr(self, 'ib') and 
                                 self.ib and 
                                 self.ib.isConnected())

            if has_real_connection:
                self.logger.info("Using real IBKR market data")
                success = await self._start_real_streaming(tickers)
                if success:
                    return True
                else:
                    self.logger.warning("Real streaming failed, falling back to simulation")
            else:
                self.logger.info("IBKR not connected, using simulation data")

            await self._start_simulation_streaming(tickers)
            return True

        except Exception as e:
            self.logger.error(f"❌ Market data streaming error: {e}")
            return False

    async def _start_simulation_streaming(self, tickers):
        """Start simulation streaming - exact same logic as web version"""
        try:
            for ticker in tickers:
                base_prices = {
                    'AAPL': 150.0, 'MSFT': 300.0, 'GOOGL': 2500.0, 
                    'TSLA': 200.0, 'NVDA': 400.0, 'APVO': 25.0
                }
                base_price = base_prices.get(ticker, random.uniform(50, 500))

                historical_prices = []
                current_price = base_price

                for i in range(50):
                    change = random.uniform(-0.02, 0.02)
                    current_price *= (1 + change)
                    historical_prices.append(current_price)

                rsi = self._calculate_rsi(historical_prices)
                bb_data = self._calculate_bollinger_bands(historical_prices)
                stoch_data = self._calculate_stochastic(historical_prices)

                self.market_data[ticker] = {
                    'last': current_price,
                    'high': max(historical_prices[-10:]) if len(historical_prices) >= 10 else current_price,
                    'low': min(historical_prices[-10:]) if len(historical_prices) >= 10 else current_price,
                    'volume': random.randint(100000, 10000000),
                    'rsi': rsi,
                    'bollinger_pct': bb_data['position'],
                    'stoch_k': stoch_data['k'],
                    'stoch_d': stoch_data['d'],
                    'price_rate': random.uniform(-0.01, 0.01),
                    'rsi_rate': random.uniform(-0.1, 0.1),
                    'bollinger_rate': random.uniform(-0.05, 0.05),
                    'trend_slope': random.uniform(-0.001, 0.001),
                    'meets_criteria': False,
                    'exchange': self.exchange_var,
                    'timestamp': datetime.now().isoformat(),
                    'status': 'Simulation',
                    'historical_prices': historical_prices
                }

                self.market_data[ticker]['meets_criteria'] = (
                    rsi < 30 or rsi > 70 or 
                    bb_data['position'] < 20 or bb_data['position'] > 80 or
                    stoch_data['k'] < self.stoch_k_min or stoch_data['d'] < self.stoch_d_min
                )

                self.logger.info(f"✅ Simulation data generated for {ticker}")

            self.streaming = True
            asyncio.create_task(self._simulation_update_loop())
            self.logger.info(f"🚀 Simulation streaming started for {len(self.market_data)} symbols")

        except Exception as e:
            self.logger.error(f"Simulation streaming error: {e}")

    def _calculate_rsi(self, prices, period=14):
        """Calculate RSI indicator - exact same as web version"""
        if len(prices) < period + 1:
            return 50.0

        deltas = [prices[i] - prices[i-1] for i in range(1, len(prices))]
        gains = [max(0, delta) for delta in deltas]
        losses = [max(0, -delta) for delta in deltas]

        avg_gain = sum(gains[-period:]) / period
        avg_loss = sum(losses[-period:]) / period

        if avg_loss == 0:
            return 100.0

        rs = avg_gain / avg_loss
        return 100 - (100 / (1 + rs))

    def _calculate_bollinger_bands(self, prices, period=20):
        """Calculate Bollinger Bands - exact same as web version"""
        if len(prices) < period:
            return {'position': 50.0}

        recent_prices = prices[-period:]
        sma = sum(recent_prices) / len(recent_prices)
        variance = sum((price - sma) ** 2 for price in recent_prices) / len(recent_prices)
        std_dev = variance ** 0.5

        upper_band = sma + (2 * std_dev)
        lower_band = sma - (2 * std_dev)

        current_price = prices[-1]

        if upper_band == lower_band:
            position = 50.0
        else:
            position = ((current_price - lower_band) / (upper_band - lower_band)) * 100

        return {'position': max(0, min(100, position))}

    def _calculate_stochastic(self, prices, k_period=14, d_period=3):
        """Calculate Stochastic oscillator - exact same as web version"""
        if len(prices) < k_period:
            return {'k': 50.0, 'd': 50.0}

        recent_prices = prices[-k_period:]
        highest_high = max(recent_prices)
        lowest_low = min(recent_prices)
        current_price = prices[-1]

        if highest_high == lowest_low:
            k_percent = 50.0
        else:
            k_percent = ((current_price - lowest_low) / (highest_high - lowest_low)) * 100

        d_percent = k_percent

        return {'k': k_percent, 'd': d_percent}

    async def _simulation_update_loop(self):
        """Update simulation data periodically - exact same as web version"""
        while self.streaming:
            try:
                for ticker in self.market_data:
                    data = self.market_data[ticker]

                    price_change = random.uniform(-0.005, 0.005)
                    data['last'] *= (1 + price_change)

                    if 'historical_prices' in data:
                        data['historical_prices'].append(data['last'])
                        if len(data['historical_prices']) > 50:
                            data['historical_prices'].pop(0)

                        data['rsi'] = self._calculate_rsi(data['historical_prices'])
                        bb_data = self._calculate_bollinger_bands(data['historical_prices'])
                        data['bollinger_pct'] = bb_data['position']
                        stoch_data = self._calculate_stochastic(data['historical_prices'])
                        data['stoch_k'] = stoch_data['k']
                        data['stoch_d'] = stoch_data['d']

                        data['price_rate'] = price_change
                        data['rsi_rate'] = random.uniform(-0.1, 0.1)
                        data['bollinger_rate'] = random.uniform(-0.05, 0.05)

                        data['meets_criteria'] = (
                            data['rsi'] < 30 or data['rsi'] > 70 or 
                            data['bollinger_pct'] < 20 or data['bollinger_pct'] > 80 or
                            data['stoch_k'] < self.stoch_k_min or data['stoch_d'] < self.stoch_d_min
                        )

                    data['timestamp'] = datetime.now().isoformat()

                await asyncio.sleep(2)

            except Exception as e:
                self.logger.error(f"Simulation update error: {e}")
                await asyncio.sleep(5)

    def stop_market_data(self):
        """Stop market data streaming"""
        self.streaming = False
        self.logger.info("Stopped market data streaming")

    def toggle_force_trade(self):
        """Toggle force trade mode on/off"""
        self.force_trade_enabled = not self.force_trade_enabled
        status = "enabled" if self.force_trade_enabled else "disabled"
        self.logger.info(f"Force trade mode {status}")
        return self.force_trade_enabled

    def get_analytics(self):
        """Get trading analytics - exact same as web version"""
        total_trades = len(self.trade_history)
        total_profit = sum(trade.get('profit', 0) for trade in self.trade_history)
        win_rate = 0.0
        
        if total_trades > 0:
            winning_trades = sum(1 for trade in self.trade_history if trade.get('profit', 0) > 0)
            win_rate = (winning_trades / total_trades) * 100
        
        return {
            'total_trades': total_trades,
            'total_profit': total_profit,
            'win_rate': win_rate,
            'available_funds': self.available_funds,
            'active_positions': len(self.active_orders),
            'last_price_change': self.last_price_change,
            'last_rsi_change': self.last_rsi_change,
            'last_bollinger_change': self.last_bollinger_change,
            'equity_per_trade': self.equity_per_trade,
            'rsi_period': self.rsi_period,
            'bb_period': self.bb_period,
            'stoch_k_period': self.stoch_k_period,
            'stoch_d_period': self.stoch_d_period,
            'stoch_k_min': self.stoch_k_min,
            'stoch_d_min': self.stoch_d_min
        }

    def update_parameters(self, params):
        """Update trading parameters"""
        for key, value in params.items():
            if hasattr(self, key):
                setattr(self, key, value)
        self.logger.info(f"Updated parameters: {params}")

class TradingGUI:
    """GUI interface for the standalone trading application"""

    def __init__(self):
        self.config = TradingConfig()
        self.trading_engine = StandaloneTradingEngine(self.config)
        self.logger = logging.getLogger(__name__)
        
        # Initialize GUI
        self.root = tk.Tk()
        self.root.title("AutoTrade Plus - Standalone Trading Application")
        self.root.geometry("1200x800")
        self.root.configure(bg='#f8f9fa')
        
        # Style configuration
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configure custom styles
        style.configure('Title.TLabel', font=('Helvetica', 16, 'bold'), background='#f8f9fa')
        style.configure('Heading.TLabel', font=('Helvetica', 12, 'bold'), background='#f8f9fa')
        style.configure('Status.TLabel', font=('Helvetica', 10), background='#f8f9fa')
        
        # Create notebook for tabs
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Create tabs
        self.create_dashboard_tab()
        self.create_settings_tab()
        self.create_analytics_tab()
        self.create_logs_tab()
        
        # Start background tasks
        self.setup_background_tasks()
        
        # Update GUI periodically
        self.update_gui()

    def create_dashboard_tab(self):
        """Create dashboard tab"""
        dashboard_frame = ttk.Frame(self.notebook)
        self.notebook.add(dashboard_frame, text="Dashboard")
        
        # Title
        title_label = ttk.Label(dashboard_frame, text="AutoTrade Plus Dashboard", style='Title.TLabel')
        title_label.pack(pady=10)
        
        # Status section
        status_frame = ttk.LabelFrame(dashboard_frame, text="System Status", padding=10)
        status_frame.pack(fill='x', padx=10, pady=5)
        
        # Status indicators
        self.status_labels = {}
        status_row = ttk.Frame(status_frame)
        status_row.pack(fill='x')
        
        # Connection status
        ttk.Label(status_row, text="Connection:", style='Heading.TLabel').pack(side='left')
        self.status_labels['connection'] = ttk.Label(status_row, text="Disconnected", style='Status.TLabel')
        self.status_labels['connection'].pack(side='left', padx=10)
        
        # Streaming status
        ttk.Label(status_row, text="Streaming:", style='Heading.TLabel').pack(side='left', padx=(20, 0))
        self.status_labels['streaming'] = ttk.Label(status_row, text="Stopped", style='Status.TLabel')
        self.status_labels['streaming'].pack(side='left', padx=10)
        
        # Force trade status
        ttk.Label(status_row, text="Force Trade:", style='Heading.TLabel').pack(side='left', padx=(20, 0))
        self.status_labels['force_trade'] = ttk.Label(status_row, text="Disabled", style='Status.TLabel')
        self.status_labels['force_trade'].pack(side='left', padx=10)
        
        # Control buttons
        button_frame = ttk.Frame(dashboard_frame)
        button_frame.pack(fill='x', padx=10, pady=5)
        
        ttk.Button(button_frame, text="Connect", command=self.connect_action).pack(side='left', padx=5)
        ttk.Button(button_frame, text="Disconnect", command=self.disconnect_action).pack(side='left', padx=5)
        ttk.Button(button_frame, text="Start Streaming", command=self.start_streaming_action).pack(side='left', padx=5)
        ttk.Button(button_frame, text="Stop Streaming", command=self.stop_streaming_action).pack(side='left', padx=5)
        ttk.Button(button_frame, text="Toggle Force Trade", command=self.toggle_force_trade_action).pack(side='left', padx=5)
        
        # Market data section
        market_frame = ttk.LabelFrame(dashboard_frame, text="Market Data", padding=10)
        market_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Market data tree
        columns = ('Symbol', 'Price', 'RSI', 'BB%', 'Stoch K', 'Stoch D', 'Volume', 'Status', 'Meets Criteria')
        self.market_tree = ttk.Treeview(market_frame, columns=columns, show='headings', height=8)
        
        for col in columns:
            self.market_tree.heading(col, text=col)
            self.market_tree.column(col, width=100)
        
        # Scrollbar for market data
        market_scroll = ttk.Scrollbar(market_frame, orient='vertical', command=self.market_tree.yview)
        self.market_tree.configure(yscrollcommand=market_scroll.set)
        
        self.market_tree.pack(side='left', fill='both', expand=True)
        market_scroll.pack(side='right', fill='y')
        
        # Active orders section
        orders_frame = ttk.LabelFrame(dashboard_frame, text="Active Orders", padding=10)
        orders_frame.pack(fill='x', padx=10, pady=5)
        
        order_columns = ('Symbol', 'Quantity', 'Buy Price', 'Timestamp', 'Profit')
        self.orders_tree = ttk.Treeview(orders_frame, columns=order_columns, show='headings', height=4)
        
        for col in order_columns:
            self.orders_tree.heading(col, text=col)
            self.orders_tree.column(col, width=120)
        
        self.orders_tree.pack(fill='x')

    def create_settings_tab(self):
        """Create settings tab"""
        settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(settings_frame, text="Settings")
        
        # Create scrollable frame
        canvas = tk.Canvas(settings_frame, bg='#f8f9fa')
        scrollbar = ttk.Scrollbar(settings_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Title
        ttk.Label(scrollable_frame, text="Trading Parameters", style='Title.TLabel').pack(pady=10)
        
        # Trading parameters
        self.create_parameter_section(scrollable_frame, "Basic Settings", [
            ("Tickers", "tickers", "APVO"),
            ("Chart Interval", "chart_interval", "1 min"),
            ("Analysis Interval", "analysis_interval", 1),
            ("Data Points", "data_points", 16),
            ("Duration", "duration_str", "1 D"),
            ("Equity per Trade", "equity_per_trade", 100.0),
            ("Hard Stop Loss", "hard_stop_loss", 0.03),
            ("Exchange", "exchange_var", "SMART")
        ])
        
        self.create_parameter_section(scrollable_frame, "Technical Analysis", [
            ("RSI Period", "rsi_period", 3),
            ("Bollinger Bands Period", "bb_period", 3),
            ("Stochastic K Period", "stoch_k_period", 2),
            ("Stochastic D Period", "stoch_d_period", 2),
            ("Stochastic K Min", "stoch_k_min", 50.0),
            ("Stochastic D Min", "stoch_d_min", 40.0)
        ])
        
        # Update button
        ttk.Button(scrollable_frame, text="Update Parameters", command=self.update_parameters_action).pack(pady=20)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

    def create_parameter_section(self, parent, title, parameters):
        """Create a section of parameters"""
        section_frame = ttk.LabelFrame(parent, text=title, padding=10)
        section_frame.pack(fill='x', padx=10, pady=5)
        
        if not hasattr(self, 'parameter_vars'):
            self.parameter_vars = {}
        
        for label, attr, default in parameters:
            row = ttk.Frame(section_frame)
            row.pack(fill='x', pady=2)
            
            ttk.Label(row, text=f"{label}:", width=20).pack(side='left')
            
            var = tk.StringVar(value=str(getattr(self.trading_engine, attr, default)))
            self.parameter_vars[attr] = var
            
            entry = ttk.Entry(row, textvariable=var, width=20)
            entry.pack(side='left', padx=10)

    def create_analytics_tab(self):
        """Create analytics tab"""
        analytics_frame = ttk.Frame(self.notebook)
        self.notebook.add(analytics_frame, text="Analytics")
        
        # Title
        ttk.Label(analytics_frame, text="Trading Analytics", style='Title.TLabel').pack(pady=10)
        
        # Analytics display
        self.analytics_labels = {}
        
        analytics_data = [
            ("Total Trades", "total_trades"),
            ("Total Profit", "total_profit"),
            ("Win Rate", "win_rate"),
            ("Available Funds", "available_funds"),
            ("Active Positions", "active_positions"),
            ("Last Price Change", "last_price_change"),
            ("Last RSI Change", "last_rsi_change"),
            ("Last Bollinger Change", "last_bollinger_change")
        ]
        
        for label, key in analytics_data:
            row = ttk.Frame(analytics_frame)
            row.pack(fill='x', padx=20, pady=5)
            
            ttk.Label(row, text=f"{label}:", style='Heading.TLabel', width=20).pack(side='left')
            self.analytics_labels[key] = ttk.Label(row, text="N/A", style='Status.TLabel')
            self.analytics_labels[key].pack(side='left', padx=10)

    def create_logs_tab(self):
        """Create logs tab"""
        logs_frame = ttk.Frame(self.notebook)
        self.notebook.add(logs_frame, text="Logs")
        
        # Title
        ttk.Label(logs_frame, text="System Logs", style='Title.TLabel').pack(pady=10)
        
        # Log display
        self.log_text = scrolledtext.ScrolledText(logs_frame, width=100, height=30, font=('Consolas', 9))
        self.log_text.pack(fill='both', expand=True, padx=10, pady=5)
        
        # Clear button
        ttk.Button(logs_frame, text="Clear Logs", command=self.clear_logs).pack(pady=5)
        
        # Setup log handler
        self.setup_log_handler()

    def setup_log_handler(self):
        """Setup log handler to display logs in GUI"""
        class GuiLogHandler(logging.Handler):
            def __init__(self, text_widget):
                super().__init__()
                self.text_widget = text_widget
                
            def emit(self, record):
                msg = self.format(record)
                def append():
                    self.text_widget.insert(tk.END, msg + '\n')
                    self.text_widget.see(tk.END)
                self.text_widget.after(0, append)
        
        handler = GuiLogHandler(self.log_text)
        handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
        logging.getLogger().addHandler(handler)

    def clear_logs(self):
        """Clear log display"""
        self.log_text.delete(1.0, tk.END)

    def setup_background_tasks(self):
        """Setup background tasks"""
        self.loop = asyncio.new_event_loop()
        self.bg_thread = threading.Thread(target=self.run_background_loop, daemon=True)
        self.bg_thread.start()

    def run_background_loop(self):
        """Run background asyncio loop"""
        asyncio.set_event_loop(self.loop)
        self.loop.run_forever()

    def run_async(self, coro):
        """Run async function in background thread"""
        future = asyncio.run_coroutine_threadsafe(coro, self.loop)
        return future

    def connect_action(self):
        """Connect action"""
        self.run_async(self.trading_engine.connect())

    def disconnect_action(self):
        """Disconnect action"""
        self.run_async(self.trading_engine.disconnect())

    def start_streaming_action(self):
        """Start streaming action"""
        self.run_async(self.trading_engine.start_market_data())

    def stop_streaming_action(self):
        """Stop streaming action"""
        self.trading_engine.stop_market_data()

    def toggle_force_trade_action(self):
        """Toggle force trade action"""
        enabled = self.trading_engine.toggle_force_trade()
        if enabled:
            messagebox.showwarning("Force Trade Mode", 
                "Force Trade Mode is now enabled.\n"
                "This mode bypasses some safety checks and may increase risk.\n"
                "Use with caution!")

    def update_parameters_action(self):
        """Update parameters action"""
        try:
            params = {}
            for attr, var in self.parameter_vars.items():
                value = var.get()
                
                # Convert to appropriate type
                if attr in ['analysis_interval', 'data_points', 'rsi_period', 'bb_period', 
                           'stoch_k_period', 'stoch_d_period']:
                    params[attr] = int(value)
                elif attr in ['equity_per_trade', 'hard_stop_loss', 'stoch_k_min', 'stoch_d_min']:
                    params[attr] = float(value)
                else:
                    params[attr] = value
            
            self.trading_engine.update_parameters(params)
            messagebox.showinfo("Success", "Parameters updated successfully!")
            
        except Exception as e:
            messagebox.showerror("Error", f"Failed to update parameters: {e}")

    def update_gui(self):
        """Update GUI with current data"""
        try:
            # Update status labels
            self.status_labels['connection'].config(text="Connected" if self.trading_engine.is_connected() else "Disconnected")
            self.status_labels['streaming'].config(text="Active" if self.trading_engine.is_streaming() else "Stopped")
            self.status_labels['force_trade'].config(text="Enabled" if self.trading_engine.force_trade_enabled else "Disabled")
            
            # Update market data
            self.update_market_data()
            
            # Update active orders
            self.update_active_orders()
            
            # Update analytics
            self.update_analytics()
            
        except Exception as e:
            self.logger.error(f"GUI update error: {e}")
        
        # Schedule next update
        self.root.after(2000, self.update_gui)

    def update_market_data(self):
        """Update market data display"""
        # Clear existing items
        for item in self.market_tree.get_children():
            self.market_tree.delete(item)
        
        # Add current market data
        for symbol, data in self.trading_engine.market_data.items():
            values = (
                symbol,
                f"${data.get('last', 0):.2f}",
                f"{data.get('rsi', 0):.1f}",
                f"{data.get('bollinger_pct', 0):.1f}%",
                f"{data.get('stoch_k', 0):.1f}",
                f"{data.get('stoch_d', 0):.1f}",
                f"{data.get('volume', 0):,}",
                data.get('status', 'N/A'),
                "Yes" if data.get('meets_criteria', False) else "No"
            )
            self.market_tree.insert('', 'end', values=values)

    def update_active_orders(self):
        """Update active orders display"""
        # Clear existing items
        for item in self.orders_tree.get_children():
            self.orders_tree.delete(item)
        
        # Add current orders
        for symbol, order in self.trading_engine.active_orders.items():
            values = (
                symbol,
                order.get('quantity', 0),
                f"${order.get('buy_price', 0):.2f}",
                order.get('timestamp', 'N/A'),
                f"${order.get('profit', 0):.2f}"
            )
            self.orders_tree.insert('', 'end', values=values)

    def update_analytics(self):
        """Update analytics display"""
        analytics = self.trading_engine.get_analytics()
        
        for key, label in self.analytics_labels.items():
            value = analytics.get(key, 'N/A')
            
            if key in ['total_profit'] and isinstance(value, (int, float)):
                label.config(text=f"${value:.2f}")
            elif key in ['win_rate'] and isinstance(value, (int, float)):
                label.config(text=f"{value:.1f}%")
            elif key in ['available_funds', 'equity_per_trade'] and isinstance(value, (int, float)):
                label.config(text=f"${value:.2f}")
            else:
                label.config(text=str(value))

    def run(self):
        """Run the GUI application"""
        try:
            self.root.mainloop()
        finally:
            # Cleanup
            if hasattr(self, 'loop'):
                self.loop.call_soon_threadsafe(self.loop.stop)

if __name__ == "__main__":
    # Create and run the application
    app = TradingGUI()
    app.run()
